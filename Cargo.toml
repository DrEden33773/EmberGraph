cargo-features = ["profile-rustflags"]

[package]
name = "ember-graph" 
version = "0.2.2"
edition = "2024"
authors = ["Eden Wang <edwardwang33773@gmail.com>"]
readme = "README.md"
license = "MIT"
description = "To query a pattern on multi-directed-graph with label / attribute filtering efficiently."
repository = "https://github.com/DrEden33773/EmberGraph"
homepage = "https://github.com/DrEden33773/EmberGraph"
keywords = [
    "sub-graph-matching",
    "attribute-graph",
    "multi-directed-graph",
    "pattern-matching",
    "graph-database",
]
categories = ["database", "concurrency"]

[dependencies]
colored = "3.0.0"
crossbeam-queue = "0.3.12"
dashmap = { version = "6.1.0", features = ["inline"] }
dotenv = "0.15.0"
futures = "0.3.31"
hashbrown = { version = "0.15.2", features = [] }
indexmap = { version = "2.9.0", features = [] }
itertools = "0.14.0"
moka = { version = "0.12.10", features = ["future"] }
neo4rs = "0.8.0"
num_cpus = "1.16.0"
ordered-float = "5.0.0"
parking_lot = { version = "0.12.3", features = ["hardware-lock-elision"] }
polars = { version = "0.46.0", features = [] }
project-root = "0.2.2"
rayon = "1.10.0"
serde = "1.0.219"
serde_json = "1.0.140"
sqlx = { version = "0.8.5", features = ["runtime-tokio", "sqlite"] }
strum = "0.27.1"
strum_macros = "0.27.1"
tokio = { version = "1.44.2", features = ["full"] }
tracing = { version = "0.1.41", features = ["async-await"] }
tracing-appender = "0.2.3"
tracing-futures = "0.2.5"
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }

# Windows: use mimalloc
[target.'cfg(windows)'.dependencies]
mimalloc = "0.1.46"

# Non-Windows: use tikv-jemallocator
[target.'cfg(not(windows))'.dependencies]
tikv-jemallocator = { version = "0.6.0", features = ["unprefixed_malloc_on_supported_platforms"] }

[features]
default = ["block_spawn_via_rayon", "cache_force_background_update", "intersection_force_element_paralleled"]
bench = ["default", "benchmark"]

block_spawn_via_rayon = []
cache_force_background_update = []
intersection_force_element_paralleled = []
benchmark = []

trace_all = ["trace_init", "trace_get_adj"]
trace_init = []
trace_get_adj = []

enable_log = []

[profile.release]
opt-level = 3
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true
debug = false
rustflags = ["-C", "target-cpu=native"]

[profile.release.package."*"]
opt-level = 3
strip = true
debug = false

[profile.release.package.polars] 
opt-level = 2 # we only use `polars.DataFrame` for `Displaying`, so it's unnecessary to do O3 optimization
strip = true
debug = false